 pipeline {
  agent any
   tools {
        jdk 'java17'
        maven 'maven3'
    }
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
        DOCKER_IMAGE = "10551jeeva/boardgame:${BUILD_NUMBER}"
          }
  stages {
    stage('Checkout') {
      steps {
          git branch: 'main', credentialsId: 'gitcred', url: 'https://github.com/Jeeva-prof/boardgame.git'
      }
    }
    stage('Test and Build') {
      steps {
        sh 'mvn compile'
        sh 'mvn test'
        }
    }
    stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
                
            }
        }
    stage('Static Code Analsyis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=BoardGame -Dsonar.projectKey=BoardGame \
                            -Dsonar.java.binaries=. '''
			 // In global settings add sonarqube url and sonarqube token
			 // In tool settings config  sonarqube install  
                }
            }
         }
    stage('Quality Gate') {
            steps {
                script {
                  waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
			// In sonarqubeserver go to administration-configure-webhook 
                }
            }
        }
     stage('Build') {
            steps {
               sh "mvn  package"
            }
        }
    stage('Publish To Nexus') {
            steps {
               withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'java17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy"
                }
            }
        } 
     stage('Build and Push Docker Image') {
        steps {
        script {
            sh 'docker build -t ${DOCKER_IMAGE} .'
                }
        }
     }
      stage('Docker Image Scan') {
            steps {
                sh "trivy image --format table -o trivy-image-report.html ${DOCKER_IMAGE} "
            }
        }
      stage('Push Docker Image') {
            steps {
               script {
                   withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                            sh "docker push ${DOCKER_IMAGE}"
                    }
               }
            }
        }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "boardgame"
            GIT_USER_NAME = "Jeeva-prof"

        }
        steps {
            withCredentials([string(credentialsId: 'git-token', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    pwd
                    git config user.email "jeeva.mpcc@gmail.com"
                    git config user.name "Jeeva R"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s+10551jeeva/boardgame:.*+${DOCKER_IMAGE}+g" deployment.yml
                    git add deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        } 
    } 
  } 
}